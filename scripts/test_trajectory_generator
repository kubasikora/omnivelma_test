#!/usr/bin/env python2

import rospy
import time
from geometry_msgs.msg import Twist

class TrajectoryGenerator:
	def __init__(self, frequency):
		self.frequency = frequency
		self.counter = 0

	def createTwist(self, linear_x, linear_y, angular_z):
		twist = Twist()
		twist.linear.x = linear_x
		twist.linear.y = linear_y
		twist.angular.z = angular_z
		return twist

	def next(self):
		self.counter += 1
		if self.counter < 5 * self.frequency:
			return self.createTwist(0.2, 0.0, 0.0)
		if self.counter < 10 * self.frequency:
			return self.createTwist(0.2, 0.2, 0.0)
		if self.counter < 15 * self.frequency:
			return self.createTwist(0.0, 0.2, 0.0)
		if self.counter < 20 * self.frequency:
			return self.createTwist(0.2, 0.2, 0.3)
		if self.counter < 25 * self.frequency:
			return self.createTwist(0.0, 0.0, 0.4)
		if self.counter < 30 * self.frequency:
			return self.createTwist(0.2, 0.0, 0.3)
		if self.counter < 35 * self.frequency:
			return self.createTwist(0.0, 0.2, 0.3)
		else:
			return None

if __name__ == "__main__":
	rospy.init_node("test_trajectory_generator", anonymous=True)
	publisher = rospy.Publisher("/cmd_vel", Twist, queue_size=10)
	freq = 10
	generator = TrajectoryGenerator(freq)
	rate = rospy.Rate(freq)
	while not rospy.is_shutdown():
		message = generator.next()
		rospy.loginfo(message)
		if message is None:
			print("All trajectory has been published, exiting...")
			break
		publisher.publish(message)
		rate.sleep()

	goodbyeMessage = Twist()
	publisher.publish(goodbyeMessage)

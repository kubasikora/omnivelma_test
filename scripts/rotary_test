#!/usr/bin/env python2


import rospy
import math
import tf2_ros
import PyKDL
import copy
from threading import Thread

from geometry_msgs.msg import Twist
from omnivelma_driver.srv import STPT
from moveit_msgs.msg import AttachedCollisionObject, CollisionObject
from shape_msgs.msg import SolidPrimitive

from velma_common import *
from rcprg_ros_utils import exitError, MarkerPublisher

from moveit_msgs.msg import AttachedCollisionObject, CollisionObject
from shape_msgs.msg import SolidPrimitive
from geometry_msgs.msg import Pose
from visualization_msgs.msg import Marker
import tf_conversions.posemath as pm

if __name__ == "__main__":
	self.velma = VelmaInterface()
	if not self.velma.waitForInit(timeout_s=10.0):
		raise Exception("Could not initialize VelmaInterface")
	if self.velma.enableMotors() != 0:
		raise Exception("Could not enable motors")
	self.velma.startHomingHP()
	if self.velma.waitForHP() != 0:
		raise Exception("Could not home head pan motor")
	self.velma.startHomingHT()
	if self.velma.waitForHT() != 0:
		raise Exception("Could not home head tilt motor")
	diag = self.velma.getCoreCsDiag()
	if not diag.motorsReady():
		raise Exception("Motors must be homed and ready to use for this test.")   

	angle = 100*2*3.14
	angularVelocity = 0.2
	time =  angle/angularVelocity

	publisher = rospy.Publisher("/cmd_vel", Twist, queue_size=10)
	msg = Twist()
	msg.linear.x = 0.0
	msg.linear.y = 0.0
	msg.linear.z = 0.0
	msg.angular.x = 0.0
	msg.angular.y = 0.0
	msg.angular.z = angularVelocity
	startTime = rospy.get_rostime()
	while rospy.get_rostime() - startTime < rospy.Duration.from_sec(time):
		publisher.publish(msg)

	stopMsg = Twist()
	publisher.publish(stopMsg)

